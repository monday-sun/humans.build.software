---
import DefaultLayout from '../../layouts/DefaultLayout.astro'
import { Breadcrumbs, BreadcrumbsItem, Card } from 'accessible-astro-components'
import { getCollection, render } from 'astro:content'
import type { CollectionEntry } from 'astro:content'
import { Image } from 'astro:assets'
import StyledLinkButton from '../../components/StyledLinkButton.astro'

export async function getStaticPaths() {
  const authors = await getCollection('authors')
  const blogEntries = await getCollection('blog')

  return authors.map((author) => {
    // Get posts by this author
    const authorPosts = blogEntries
      .filter((post) => post.data.author === author.id)
      .sort((a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf())

    return {
      params: { author: author.id },
      props: { author, posts: authorPosts },
    }
  })
}

interface Props {
  author: CollectionEntry<'authors'>
  posts: CollectionEntry<'blog'>[]
}

const { author, posts } = Astro.props
const { Content } = await render(author)
---

<DefaultLayout
  title={`${author.data.name} - Author`}
  description={`About ${author.data.name}, author at Humans Build Software`}
>
  <div class="container">
    <div class="mt-12">
      <Breadcrumbs>
        <BreadcrumbsItem href="/" label="Home" />
        <BreadcrumbsItem href="/blog" label="Blog" />
        <BreadcrumbsItem currentPage={true} label={author.data.name} />
      </Breadcrumbs>
    </div>
  </div>

  <section class="my-12">
    <div class="container">
      <div class="author-header mb-8 flex items-center gap-6">
        {
          author.data.avatar && (
            <Image
              src={author.data.avatar}
              alt={`${author.data.name}'s avatar`}
              width={120}
              height={120}
              class="rounded-full"
            />
          )
        }
        <div>
          <h1 class="mb-2">{author.data.name}</h1>
          {
            author.data.pronouns && (
              <p class="text-xl text-neutral-700 dark:text-neutral-300">({author.data.pronouns})</p>
            )
          }
        </div>
      </div>

      <div class="author-bio prose dark:prose-invert mb-12 max-w-3xl">
        <Content />
      </div>

      {
        author.data.social && (
          <div class="connect mb-12">
            <h2 class="mb-4 text-xl">Connect with {author.data.name.split(' ')[0]}</h2>
            <div class="social-links flex flex-wrap gap-3">
              {Object.entries(author.data.social).map(([key, social]) => (
                <StyledLinkButton href={social.url} label={social.label} iconName={social.icon} title={social.label} />
              ))}
            </div>
          </div>
        )
      }

      <div class="author-posts">
        <h2 class="mb-6 text-2xl">Posts by {author.data.name}</h2>
        {
          posts.length > 0 ? (
            <ul class="post-grid">
              {posts.map((post) => (
                <li>
                  <Card
                    url={`/blog/${post.id}`}
                    title={post.data.title}
                    footer={`${new Date(post.data.pubDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                    })}`}
                  >
                    {post.data.description}
                  </Card>
                </li>
              ))}
            </ul>
          ) : (
            <p>No posts found.</p>
          )
        }
      </div>
    </div>
  </section>
</DefaultLayout>

<style lang="scss">
  .author-bio :global(p) {
    margin-bottom: 1rem;
  }

  .post-grid {
    display: grid;
    grid-template-columns: 1fr;
    grid-gap: 2rem;

    @media (min-width: 550px) {
      grid-template-columns: repeat(2, 1fr);
    }

    @media (min-width: 950px) {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .prose {
    @apply text-lg leading-relaxed;

    :global(h2) {
      @apply text-2xl font-bold mt-8 mb-4;
    }

    :global(h3) {
      @apply text-xl font-bold mt-6 mb-3;
    }

    :global(p) {
      @apply mb-4;
    }

    :global(ul, ol) {
      @apply mb-4 pl-6;
    }

    :global(li) {
      @apply mb-1;
    }

    :global(blockquote) {
      @apply border-l-4 border-neutral-300 dark:border-neutral-700 pl-4 italic;
    }

    :global(a) {
      color: var(--action-color);
      text-decoration: underline;

      &:hover,
      &:focus {
        color: var(--action-color-state);
        text-decoration: none;
      }
    }
  }
</style>
